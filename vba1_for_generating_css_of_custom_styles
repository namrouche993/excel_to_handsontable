Sub GenerateUniqueCSSStyles()
    Dim ws As Worksheet
    Set ws = ThisWorkbook.Sheets("only_table") ' Adjust the sheet reference as needed!!!

    Dim cellRange As Range
    ' Use the UsedRange property to automatically select all used cells
    Set cellRange = ws.UsedRange ' Adjusted to use all used cells

    Dim cell As Range
    Dim uniqueStyles As Object
    Set uniqueStyles = CreateObject("Scripting.Dictionary")
    Dim cssStyle As String
    Dim styleIndex As Integer
    styleIndex = 1

    ' Iterate through each cell in the used range
    For Each cell In cellRange
        cssStyle = GenerateCSSForCell(cell)
        ' Check if the style is not empty and not already in uniqueStyles
        If cssStyle <> "" And Not uniqueStyles.exists(cssStyle) Then
            ' Add new unique style to the dictionary
            uniqueStyles.Add cssStyle, "custom_style_" & styleIndex
            styleIndex = styleIndex + 1
        End If
    Next cell

    ' Prepare to write to file
    Dim filePath As String
    filePath = Application.ActiveWorkbook.Path & "\output_to_use\adding_App.css" ' Adjust the path as necessary
    Dim fileNum As Integer
    fileNum = FreeFile

    ' Open the file for writing
    Open filePath For Output As #fileNum

    ' Output the unique CSS styles with "td." prefix!!
    Dim key As Variant
    For Each key In uniqueStyles.keys
        Print #fileNum, "td." & uniqueStyles(key) & " { " & key & " }"
    Next key

    ' Close the file
    Close #fileNum

    MsgBox "CSS styles have been saved to " & filePath
End Sub


Function GenerateCSSForCell(cell As Range) As String
    Dim css As String
    css = ""
    
    ' Font weight
    If cell.Font.Bold = True Then
        css = css & "font-weight: bold !important; "
    End If
    
    ' Font color
    If cell.Font.ColorIndex <> xlNone Then
        Dim fontColor As String
        fontColor = RGBToHex(cell.Font.Color)
        css = css & "color: #" & fontColor & " !important; "
    End If
    
    ' Background color
    If cell.Interior.ColorIndex <> xlNone Then
        Dim bgColor As String
        bgColor = RGBToHex(cell.Interior.Color)
        css = css & "background-color: #" & bgColor & " !important; "
    End If
    
    ' Borders
    Dim borderSide As Variant
    For Each borderSide In Array(xlEdgeLeft, xlEdgeTop, xlEdgeRight, xlEdgeBottom)
        If Not cell.Borders(borderSide).LineStyle = xlLineStyleNone Then
            Dim borderColor As String
            borderColor = RGBToHex(cell.Borders(borderSide).Color)
            Dim borderWidth As String
            borderWidth = "1px" ' Simplified to 1px; adjust based on your needs
            Dim borderStyle As String
            borderStyle = "solid" ' Simplified to 'solid'; adjust based on actual line style if needed
            Select Case borderSide
                Case xlEdgeLeft
                    css = css & "border-left: " & borderWidth & " " & borderStyle & " #" & borderColor & " !important; "
                Case xlEdgeTop
                    css = css & "border-top: " & borderWidth & " " & borderStyle & " #" & borderColor & " !important; "
                Case xlEdgeRight
                    css = css & "border-right: " & borderWidth & " " & borderStyle & " #" & borderColor & " !important; "
                Case xlEdgeBottom
                    css = css & "border-bottom: " & borderWidth & " " & borderStyle & " #" & borderColor & " !important; "
            End Select
        End If
    Next borderSide
    
    GenerateCSSForCell = css
End Function

' Updated RGBToHex function to handle potential errors with automatic color indexing
Function RGBToHex(Color As Long) As String
    On Error Resume Next ' In case of color indexing issues
    Dim Red As String, Green As String, Blue As String
    Red = Right("0" & Hex(Color Mod 256), 2)
    Green = Right("0" & Hex(Color \ 256 Mod 256), 2)
    Blue = Right("0" & Hex(Color \ 65536 Mod 256), 2)
    RGBToHex = Blue & Green & Red
    On Error GoTo 0 ' Turn back on error reporting
End Function


